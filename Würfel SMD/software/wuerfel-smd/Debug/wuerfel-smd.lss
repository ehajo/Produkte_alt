
wuerfel-smd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000613  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000432  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034b  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d2  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000247  00000000  00000000  000013c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	c5 c0       	rjmp	.+394    	; 0x18e <__vector_1>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	ac c0       	rjmp	.+344    	; 0x160 <__vector_3>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	11 c0       	rjmp	.+34     	; 0x30 <__bad_interrupt>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a2 36       	cpi	r26, 0x62	; 98
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	2c d0       	rcall	.+88     	; 0x86 <main>
  2e:	c5 c0       	rjmp	.+394    	; 0x1ba <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <wuerfel>:
	return 0;
}

void wuerfel(uint8_t zahl)
{
	PORTB |= 0b00011101;
  32:	98 b3       	in	r25, 0x18	; 24
  34:	9d 61       	ori	r25, 0x1D	; 29
  36:	98 bb       	out	0x18, r25	; 24
	switch (zahl)
  38:	82 30       	cpi	r24, 0x02	; 2
  3a:	81 f0       	breq	.+32     	; 0x5c <__SREG__+0x1d>
  3c:	28 f4       	brcc	.+10     	; 0x48 <__SREG__+0x9>
  3e:	88 23       	and	r24, r24
  40:	49 f0       	breq	.+18     	; 0x54 <__SREG__+0x15>
  42:	81 30       	cpi	r24, 0x01	; 1
  44:	49 f0       	breq	.+18     	; 0x58 <__SREG__+0x19>
  46:	08 95       	ret
  48:	84 30       	cpi	r24, 0x04	; 4
  4a:	71 f0       	breq	.+28     	; 0x68 <__SREG__+0x29>
  4c:	50 f0       	brcs	.+20     	; 0x62 <__SREG__+0x23>
  4e:	85 30       	cpi	r24, 0x05	; 5
  50:	71 f0       	breq	.+28     	; 0x6e <__SREG__+0x2f>
  52:	08 95       	ret
	{
		case 0:	// wuerfel 1
		PORTB &= ~((1<<PB3));
  54:	c3 98       	cbi	0x18, 3	; 24
  56:	08 95       	ret
		break;
		case 1:	// wuerfel 2
		PORTB &= ~((1<<PB4));
  58:	c4 98       	cbi	0x18, 4	; 24
		break;
  5a:	08 95       	ret
		case 2:	// wuerfel 3
		PORTB &= ~((1<<PB3) | (1<<PB4));
  5c:	88 b3       	in	r24, 0x18	; 24
  5e:	87 7e       	andi	r24, 0xE7	; 231
  60:	08 c0       	rjmp	.+16     	; 0x72 <__SREG__+0x33>
		break;
		case 3:	// wuerfel 4
		PORTB &= ~((1<<PB4) | (1<<PB2));
  62:	88 b3       	in	r24, 0x18	; 24
  64:	8b 7e       	andi	r24, 0xEB	; 235
  66:	05 c0       	rjmp	.+10     	; 0x72 <__SREG__+0x33>
		break;
		case 4:	// wuerfel 5
		PORTB &= ~((1<<PB4) | (1<<PB2) | (1<<PB3));
  68:	88 b3       	in	r24, 0x18	; 24
  6a:	83 7e       	andi	r24, 0xE3	; 227
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__SREG__+0x33>
		break;
		case 5:	// wuerfel 6
		PORTB &= ~((1<<PB4) | (1<<PB2) | (1<<PB0));
  6e:	88 b3       	in	r24, 0x18	; 24
  70:	8a 7e       	andi	r24, 0xEA	; 234
  72:	88 bb       	out	0x18, r24	; 24
  74:	08 95       	ret

00000076 <long_delay>:
}


void long_delay(uint16_t ms)
{
	for(; ms>0; ms--)
  76:	00 97       	sbiw	r24, 0x00	; 0
  78:	29 f0       	breq	.+10     	; 0x84 <long_delay+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	28 ec       	ldi	r18, 0xC8	; 200
  7c:	2a 95       	dec	r18
  7e:	f1 f7       	brne	.-4      	; 0x7c <long_delay+0x6>
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f9 cf       	rjmp	.-14     	; 0x76 <long_delay>
	_delay_ms(1);
}
  84:	08 95       	ret

00000086 <main>:
	uint8_t i;
	uint16_t verzoegerung = 0;
	uint8_t auge = 7;
	uint8_t auge2 = 7;

	DDRB = 0b00011101;
  86:	8d e1       	ldi	r24, 0x1D	; 29
  88:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1<<PB1);
  8a:	c1 9a       	sbi	0x18, 1	; 24

	TCCR0B |=  (1<<CS00);
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	83 bf       	out	0x33, r24	; 51
	TIMSK0 |= (1<<TOIE0);
  92:	89 b7       	in	r24, 0x39	; 57
  94:	82 60       	ori	r24, 0x02	; 2
  96:	89 bf       	out	0x39, r24	; 57
	//MCUCR |= (1<<ISC00);// | (1<<ISC01);

	sei();
  98:	78 94       	sei
int main()
{
	uint8_t i;
	uint16_t verzoegerung = 0;
	uint8_t auge = 7;
	uint8_t auge2 = 7;
  9a:	87 e0       	ldi	r24, 0x07	; 7
  9c:	d8 2e       	mov	r13, r24
			verzoegerung = 0;
			long_delay(200);
			if ( !(PINB & (1<<PINB1)) )
			{
				auge = TCNT0;
				auge2 = auge%6;
  9e:	96 e0       	ldi	r25, 0x06	; 6
  a0:	f9 2e       	mov	r15, r25

	//srand(get_seed());

	while (1)
	{
		if(Timer2>20000l)
  a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  aa:	81 32       	cpi	r24, 0x21	; 33
  ac:	9e 44       	sbci	r25, 0x4E	; 78
  ae:	98 f0       	brcs	.+38     	; 0xd6 <__stack+0x37>
		{
			wuerfel(7);
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	bf df       	rcall	.-130    	; 0x32 <wuerfel>
			GIMSK |= (1 << INT0);
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8b bf       	out	0x3b, r24	; 59
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	87 7e       	andi	r24, 0xE7	; 231
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	85 bf       	out	0x35, r24	; 53
			sleep_mode();
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	85 bf       	out	0x35, r24	; 53
  c8:	88 95       	sleep
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	85 bf       	out	0x35, r24	; 53
			GIMSK &= ~(1 << INT0);
  d0:	8b b7       	in	r24, 0x3b	; 59
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	8b bf       	out	0x3b, r24	; 59
		}
		if ( !(PINB & (1<<PINB1)) )
  d6:	b1 99       	sbic	0x16, 1	; 22
  d8:	e4 cf       	rjmp	.-56     	; 0xa2 <__stack+0x3>
		{
			verzoegerung = 0;
			long_delay(200);
  da:	88 ec       	ldi	r24, 0xC8	; 200
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	cb df       	rcall	.-106    	; 0x76 <long_delay>
			if ( !(PINB & (1<<PINB1)) )
  e0:	b1 99       	sbic	0x16, 1	; 22
  e2:	37 c0       	rjmp	.+110    	; 0x152 <__stack+0xb3>
			{
				auge = TCNT0;
  e4:	c2 b7       	in	r28, 0x32	; 50
				auge2 = auge%6;
  e6:	8c 2f       	mov	r24, r28
  e8:	6f 2d       	mov	r22, r15
  ea:	5b d0       	rcall	.+182    	; 0x1a2 <__udivmodqi4>
  ec:	e9 2e       	mov	r14, r25
  ee:	d9 2e       	mov	r13, r25
				while(!(PINB & (1<<PINB1)))
  f0:	b1 99       	sbic	0x16, 1	; 22
  f2:	0f c0       	rjmp	.+30     	; 0x112 <__stack+0x73>
  f4:	d0 e0       	ldi	r29, 0x00	; 0
				{
					for(i=0;i<7;i++)
					{
						auge += i;
  f6:	8d 2f       	mov	r24, r29
  f8:	8c 0f       	add	r24, r28
						auge%=6;
  fa:	6f 2d       	mov	r22, r15
  fc:	52 d0       	rcall	.+164    	; 0x1a2 <__udivmodqi4>
  fe:	c9 2f       	mov	r28, r25
						wuerfel(auge);
 100:	89 2f       	mov	r24, r25
 102:	97 df       	rcall	.-210    	; 0x32 <wuerfel>
						long_delay(20);
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	b6 df       	rcall	.-148    	; 0x76 <long_delay>
			{
				auge = TCNT0;
				auge2 = auge%6;
				while(!(PINB & (1<<PINB1)))
				{
					for(i=0;i<7;i++)
 10a:	df 5f       	subi	r29, 0xFF	; 255
 10c:	d7 30       	cpi	r29, 0x07	; 7
 10e:	99 f7       	brne	.-26     	; 0xf6 <__stack+0x57>
 110:	ef cf       	rjmp	.-34     	; 0xf0 <__stack+0x51>
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	00 e0       	ldi	r16, 0x00	; 0
 118:	10 e0       	ldi	r17, 0x00	; 0
						long_delay(20);
					}
				}
				for(i=0;i<18;i++)
				{
					long_delay(20+verzoegerung);
 11a:	c8 01       	movw	r24, r16
 11c:	44 96       	adiw	r24, 0x14	; 20
 11e:	ab df       	rcall	.-170    	; 0x76 <long_delay>
					wuerfel((i)%6);
 120:	8c 2f       	mov	r24, r28
 122:	6f 2d       	mov	r22, r15
 124:	3e d0       	rcall	.+124    	; 0x1a2 <__udivmodqi4>
 126:	89 2f       	mov	r24, r25
 128:	84 df       	rcall	.-248    	; 0x32 <wuerfel>
					verzoegerung+=(i);
 12a:	0c 0f       	add	r16, r28
 12c:	1d 1f       	adc	r17, r29
 12e:	21 96       	adiw	r28, 0x01	; 1
						auge%=6;
						wuerfel(auge);
						long_delay(20);
					}
				}
				for(i=0;i<18;i++)
 130:	c2 31       	cpi	r28, 0x12	; 18
 132:	d1 05       	cpc	r29, r1
 134:	91 f7       	brne	.-28     	; 0x11a <__stack+0x7b>
				{
					long_delay(20+verzoegerung);
					wuerfel((i)%6);
					verzoegerung+=(i);
				}
				long_delay(verzoegerung);
 136:	c8 01       	movw	r24, r16
 138:	9e df       	rcall	.-196    	; 0x76 <long_delay>
				wuerfel(auge2);
 13a:	8e 2d       	mov	r24, r14
 13c:	7a df       	rcall	.-268    	; 0x32 <wuerfel>
				long_delay(400);
 13e:	80 e9       	ldi	r24, 0x90	; 144
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	99 df       	rcall	.-206    	; 0x76 <long_delay>
				wuerfel(7);
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	75 df       	rcall	.-278    	; 0x32 <wuerfel>
				long_delay(200);
 148:	88 ec       	ldi	r24, 0xC8	; 200
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	94 df       	rcall	.-216    	; 0x76 <long_delay>
				wuerfel(auge2);
 14e:	8e 2d       	mov	r24, r14
 150:	01 c0       	rjmp	.+2      	; 0x154 <__stack+0xb5>
				Timer2=0;
			}
			else
			{
				wuerfel(auge2);
 152:	8d 2d       	mov	r24, r13
 154:	6e df       	rcall	.-292    	; 0x32 <wuerfel>
				Timer2=0;
 156:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 15a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 15e:	a1 cf       	rjmp	.-190    	; 0xa2 <__stack+0x3>

00000160 <__vector_3>:
	for(; ms>0; ms--)
	_delay_ms(1);
}

ISR(TIM0_OVF_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25

	Timer2++;
 16e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 172:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>

}
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_1>:

ISR(INT0_vect) {
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
}
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__udivmodqi4>:
 1a2:	99 1b       	sub	r25, r25
 1a4:	79 e0       	ldi	r23, 0x09	; 9
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__udivmodqi4_ep>

000001a8 <__udivmodqi4_loop>:
 1a8:	99 1f       	adc	r25, r25
 1aa:	96 17       	cp	r25, r22
 1ac:	08 f0       	brcs	.+2      	; 0x1b0 <__udivmodqi4_ep>
 1ae:	96 1b       	sub	r25, r22

000001b0 <__udivmodqi4_ep>:
 1b0:	88 1f       	adc	r24, r24
 1b2:	7a 95       	dec	r23
 1b4:	c9 f7       	brne	.-14     	; 0x1a8 <__udivmodqi4_loop>
 1b6:	80 95       	com	r24
 1b8:	08 95       	ret

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
